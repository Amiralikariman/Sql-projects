--This SQL provides insight into customer and order data.
--Source: Database with 6 tables containing customer data and sales data from January through May.

--How many orders were placed in January? 
SELECT COUNT(orderID) FROM BIT_DB.JanSales
WHERE orderID <> ''
    AND orderID <> 'Order ID';

--How many of those orders were for an iPhone?
SELECT COUNT(orderID) FROM BIT_DB.JanSales
WHERE Product = 'iPhone'
    AND orderID <> ''
    AND orderID <> 'Order ID';
    
--Select the customer account numbers for all the orders that were placed in February.
SELECT 
    DISTINCT customers.acctnum
FROM BIT_DB.customers AS customers
INNER JOIN BIT_DB.FebSales AS feb_sales
    ON BIT_DB.customers.order_id = BIT_DB.feb_sales.orderID
WHERE feb_sales.orderID <> ''
    AND feb_sales.orderID <> 'Order ID';

--Which product was the cheapest one sold in January, and what was the price? 
SELECT 
    DISTINCT Product, 
    price 
FROM BIT_DB.JanSales 
ORDER BY price ASC 
LIMIT 1;

--What is the total revenue for each product sold in January?
SELECT 
    Product,
    ROUND(SUM(Quantity * price), 2) AS total_revenue
FROM BIT_DB.JanSales
GROUP BY Product
ORDER BY total_revenue DESC;

--How many products were sold in February at 548 Lincoln St, Seattle, WA 98101, and what was the total revenue of these products?
SELECT 
    Quantity,
    Product,
    SUM(Quantity * price) AS total_revenue
FROM BIT_DB.FebSales
WHERE location = '548 Lincoln St, Seattle, WA 98101'
GROUP BY Product;

--How many customers ordered more than two products at a time in February, and what was the average amount spent for those customers?
SELECT 
    COUNT(DISTINCT customers.acctnum) AS customers_buying_min3_products_in_Feb,
    ROUND(AVG(Quantity * price), 2) AS average_amount_spent
FROM BIT_DB.customers AS customers
LEFT JOIN BIT_DB.FebSales AS feb_sales
ON customers.order_ID = feb_sales.orderID
WHERE feb_sales.Quantity > 2
    AND customers.order_ID <> ''
    AND customers.order_ID <> 'Order ID';
    
--List all the products sold in Los Angeles in February, and include how many of each were sold.
SELECT 
    Product,
    SUM(Quantity) AS total_quantity
FROM BIT_DB.FebSales
WHERE location LIKE '%Los Angeles%'
    AND Product <> ''
    AND Product <> 'Product'
GROUP BY Product
ORDER BY total_quantity DESC;

--Which locations in New York received at least 3 orders in January, and how many orders did they each receive?
SELECT 
    DISTINCT location,
    COUNT(orderID) AS total_orders
FROM BIT_DB.JanSales
GROUP BY location
HAVING location LIKE '%NY%'
    AND total_orders >= 3
ORDER BY location ASC;

--How many of each type of headphone were sold in February?
SELECT 
    Product,
    SUM(Quantity) AS quantity_sold
FROM BIT_DB.FebSales
GROUP BY Product
HAVING Product LIKE '%Headphones%'
ORDER BY quantity_sold DESC;

--What was the average amount spent per account in February? (overall average, not average for each account)
SELECT 
    SUM(Quantity * price) / COUNT(customers.acctnum) AS average_amount_spent
FROM BIT_DB.FebSales AS feb_sales
LEFT JOIN BIT_DB.customers AS customers
    ON BIT_DB.feb_sales.orderID = BIT_DB.customers.order_ID
WHERE orderid <> '' 
AND orderid <> 'Order ID';

--What was the average quantity of products purchased per account in February? (overall average, not average for each account)
SELECT 
    SUM(Quantity) / COUNT(customers.acctnum) AS average_items_purchased
FROM BIT_DB.FebSales AS feb_sales
LEFT JOIN BIT_DB.customers AS customers
    ON BIT_DB.feb_sales.orderID = BIT_DB.customers.order_id
WHERE orderid <> '' 
AND orderid <> 'Order ID';

--Which product brought in the most revenue in January and how much revenue did it bring in?
SELECT 
    Product,
    ROUND(SUM(Quantity * price), 2) AS total_revenue
FROM BIT_DB.JanSales
GROUP BY Product
HAVING Product <> ''
    AND Product <> 'Product'
ORDER BY total_revenue DESC
LIMIT 1;

--Query the account numbers, count of order IDs, product, quantity, price, order date, and location for all orders that were placed in February.
SELECT 
    c.acctnum,
    count(f.orderID) AS orders,
    f.product,
    f.quantity,
    f.price,
    f.orderdate,
    f.location
FROM BIT_DB.FebSales AS f
INNER JOIN BIT_DB.customers AS c
ON f.orderid = c.order_id
GROUP BY 
    c.acctnum,
    f.product,
    f.quantity,
    f.price,
    f.orderdate,
    f.location;
